// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  googleId      String?  @unique
  hubspotId     String?
  accessToken   String?
  refreshToken  String?
  accessTokenExpiresAt DateTime?
  hubspotAccessToken String?
  hubspotRefreshToken String?
  hubspotTokenExpiresAt DateTime?
  lastEmailSync    DateTime?
  lastCalendarSync DateTime?
  lastHubspotSync  DateTime?
  settings      Json?     // Store user settings as JSON
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  conversations Conversation[]
  tasks        Task[]
  ongoingInstructions OngoingInstruction[]
  emailMessages EmailMessage[]
  calendarEvents CalendarEvent[]
  hubspotContacts HubspotContact[]
  hubspotNotes HubspotNote[]
  vectorDocuments VectorDocument[]
  webhookEvents WebhookEvent[]

  @@map("users")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // 'user' | 'assistant' | 'system'
  content        String
  toolCalls      Json?    // Store tool calls as JSON
  createdAt      DateTime @default(now())

  // Relationships
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Task {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  status      String   @default("pending") // 'pending' | 'in_progress' | 'waiting_response' | 'completed' | 'failed'
  priority    String   @default("medium") // 'low' | 'medium' | 'high'
  dueDate     DateTime?
  completedAt DateTime?
  metadata    Json?    // Store task-specific data
  parentTaskId String? // For multi-step tasks
  stepOrder   Int?     // Order of step in multi-step task
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentTask  Task?    @relation("TaskSteps", fields: [parentTaskId], references: [id])
  subTasks    Task[]   @relation("TaskSteps")

  @@map("tasks")
}

model OngoingInstruction {
  id          String   @id @default(cuid())
  userId      String
  instruction String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ongoing_instructions")
}

model EmailMessage {
  id          String   @id @default(cuid())
  userId      String
  gmailId     String   @unique
  threadId    String?
  from        String
  to          String[]
  cc          String[]
  bcc         String[]
  subject     String?
  body        String
  isRead      Boolean  @default(false)
  isArchived  Boolean  @default(false)
  labels      String[]
  receivedAt  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_messages")
}

model CalendarEvent {
  id          String   @id @default(cuid())
  userId      String
  googleEventId String  @unique
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  attendees   String[]
  location    String?
  isAllDay    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("calendar_events")
}

model HubspotContact {
  id            String   @id @default(cuid())
  userId        String
  hubspotId     String
  email         String?
  firstName     String?
  lastName      String?
  phone         String?
  company       String?
  jobTitle      String?
  lifecycleStage String?
  leadStatus    String?
  properties    Json?    // Store additional HubSpot properties
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes         HubspotNote[]

  @@unique([userId, hubspotId])
  @@map("hubspot_contacts")
}

model HubspotNote {
  id            String   @id @default(cuid())
  userId        String
  contactId     String
  hubspotNoteId String   @unique
  content       String
  properties    Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact       HubspotContact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("hubspot_notes")
}

model VectorDocument {
  id          String   @id @default(cuid())
  userId      String
  content     String
  metadata    Json?    // Store source, type, etc.
  embedding   Unsupported("vector(384)")? // pgvector embedding for HF all-MiniLM-L6-v2
  createdAt   DateTime @default(now())

  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vector_documents")
}

model WebhookEvent {
  id        String   @id @default(cuid())
  userId    String
  source    String   // 'gmail' | 'calendar' | 'hubspot'
  eventType String
  payload   Json
  processed Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("webhook_events")
} 